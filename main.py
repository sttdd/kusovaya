import telebot
from telebot import types
from sqlalchemy import create_engine, Column, Integer, String, Date, Text, ForeignKey, DateTime, Sequence, BigInteger
from sqlalchemy.orm import sessionmaker, declarative_base
from datetime import datetime, timedelta
from contextlib import contextmanager
import re
import logging
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import io
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
CONFIG = {
    "TELEGRAM_TOKEN": "",
    "HR_CHAT_ID": "",
    "DB_URL": "postgresql://postgres:1234@localhost:5432/kkuurrss"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, filename='bot.log', format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(CONFIG["TELEGRAM_TOKEN"])

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
font_path = "DejaVuSans.ttf"
if os.path.exists(font_path):
    pdfmetrics.registerFont(TTFont("DejaVuSans", font_path))
else:
    logger.error("–®—Ä–∏—Ñ—Ç DejaVuSans.ttf –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    raise FileNotFoundError("–®—Ä–∏—Ñ—Ç DejaVuSans.ttf –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–µ–π
Base = declarative_base()

# –ú–æ–¥–µ–ª–∏ –ë–î
class User(Base):
    __tablename__ = 'users'
    user_id = Column(BigInteger, primary_key=True)
    first_name = Column(String(100), nullable=False)
    last_name = Column(String(100), nullable=False)
    position = Column(String(100))
    department = Column(String(100))
    email = Column(String(100), unique=True, nullable=False)

class Application(Base):
    __tablename__ = 'applications'
    application_id = Column(Integer, Sequence('applications_application_id_seq'), primary_key=True)
    user_id = Column(BigInteger, ForeignKey('users.user_id'), nullable=False)
    start_date = Column(Date, nullable=False)
    end_date = Column(Date, nullable=False)
    type = Column(String(100), nullable=False)
    status = Column(String(20), nullable=False)
    reason = Column(Text)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class Log(Base):
    __tablename__ = 'logs'
    log_id = Column(Integer, Sequence('logs_log_id_seq'), primary_key=True)
    user_id = Column(BigInteger, ForeignKey('users.user_id'), nullable=False)
    action = Column(Text, nullable=False)
    timestamp = Column(DateTime, default=datetime.utcnow)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_engine(CONFIG["DB_URL"], pool_size=5, max_overflow=10)
Base.metadata.create_all(engine)
SessionFactory = sessionmaker(bind=engine)

# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
@contextmanager
def db_session():
    session = SessionFactory()
    try:
        yield session
        session.commit()
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise e
    finally:
        session.close()

# –ö–ª–∞—Å—Å –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
class Keyboards:
    @staticmethod
    def main_menu():
        return types.ReplyKeyboardMarkup(resize_keyboard=True).add("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    @staticmethod
    def action(chat_id):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["üèñÔ∏è –û—Ç–ø—É—Å–∫", "ü§í –ë–æ–ª—å–Ω–∏—á–Ω—ã–π"]
        if is_admin(chat_id):
            buttons.extend(["üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫", "üìä –û—Ç—á–µ—Ç", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "üìú Logs"])
        return markup.add(*buttons)

    @staticmethod
    def vacation_type():
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        types_list = ["üå¥ –ï–∂–µ–≥–æ–¥–Ω—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π –æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π", "üåû –ï–∂–µ–≥–æ–¥–Ω—ã–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π",
                      "üèùÔ∏è –ë–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã", "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        return markup.add(*types_list)

    @staticmethod
    def report_options():
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["üìÖ –ó–∞—è–≤–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥", "‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –æ—Ç–¥–µ–ª–∞–º", "üë§ –ó–∞—è–≤–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        return markup.add(*buttons)

# –£—Ç–∏–ª–∏—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_admin(chat_id):
    return str(chat_id) == CONFIG["HR_CHAT_ID"]

def send_message(chat_id, text, reply_markup=None):
    try:
        msg = bot.send_message(chat_id, text, reply_markup=reply_markup)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {chat_id}: {text}")
        return msg
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {chat_id}: {e}")
        raise

def send_pdf(chat_id, pdf_buffer, filename):
    pdf_buffer.seek(0)
    bot.send_document(chat_id, pdf_buffer, visible_file_name=filename)
    logger.info(f"PDF –æ—Ç—á–µ—Ç {filename} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {chat_id}")

def delete_message(chat_id, message_id):
    try:
        bot.delete_message(chat_id, message_id)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–¥–∞–ª–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_id}")
    except Exception:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}")

def validate_date(date_str, allow_past=False):
    try:
        date_obj = datetime.strptime(date_str, '%Y-%m-%d')
        if not allow_past and date_obj < datetime.now():
            return False, "–î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º"
        return True, date_obj
    except ValueError:
        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–ì–ì–ì–ì-–ú–ú-–î–î)"

def validate_email(email):
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    if re.match(email_pattern, email):
        return True, None
    return False, "–ù–µ–≤–µ—Ä–Ω—ã–π email"

def handle_main_menu_return(message, next_step=None, *args):
    if message.text == "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        back_to_main_menu(message)
        return True
    if next_step:
        bot.register_next_step_handler(message, next_step, *args)
    return False

def generate_pdf_report(title, content_lines):
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle(name='CustomTitle', fontName='DejaVuSans', fontSize=14, leading=16))
    styles.add(ParagraphStyle(name='CustomNormal', fontName='DejaVuSans', fontSize=10, leading=12))
    story = [Paragraph(title, styles['CustomTitle']), Spacer(1, 12)]
    for line in content_lines:
        story.append(Paragraph(line, styles['CustomNormal']))
        story.append(Spacer(1, 6))
    doc.build(story)
    return buffer

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞—è–≤–æ–∫
last_applications_message = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    with db_session() as session:
        user = session.query(User).filter_by(user_id=chat_id).first()
        if user:
            send_message(chat_id, "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", Keyboards.action(chat_id))
        else:
            send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è:", Keyboards.main_menu())
            bot.register_next_step_handler(message, register_first_name)

@bot.message_handler(func=lambda m: m.text == "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def back_to_main_menu(message):
    chat_id = message.chat.id
    with db_session() as session:
        user = session.query(User).filter_by(user_id=chat_id).first()
        markup = Keyboards.action(chat_id) if user else Keyboards.main_menu()
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if user else "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        send_message(chat_id, text, markup)

@bot.message_handler(func=lambda m: m.text == "üèñÔ∏è –û—Ç–ø—É—Å–∫")
def handle_vacation(message):
    chat_id = message.chat.id
    with db_session() as session:
        user = session.query(User).filter_by(user_id=chat_id).first()
        if not user:
            send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return
    send_message(chat_id, "–¢–∏–ø –æ—Ç–ø—É—Å–∫–∞:", Keyboards.vacation_type())

@bot.message_handler(func=lambda m: m.text == "ü§í –ë–æ–ª—å–Ω–∏—á–Ω—ã–π")
def handle_sick_leave(message):
    chat_id = message.chat.id
    with db_session() as session:
        user = session.query(User).filter_by(user_id=chat_id).first()
        if not user:
            send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return
    send_message(chat_id, "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):", Keyboards.main_menu())
    bot.register_next_step_handler(message, application_start_date, "–±–æ–ª—å–Ω–∏—á–Ω—ã–π")

@bot.message_handler(func=lambda m: m.text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫")
def handle_review_applications(message):
    review_applications_button(message)

@bot.message_handler(func=lambda m: m.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
def handle_delete_user(message):
    delete_user_button(message)

@bot.message_handler(func=lambda m: m.text == "üìä –û—Ç—á–µ—Ç")
def handle_report(message):
    chat_id = message.chat.id
    if not is_admin(chat_id):
        return send_message(chat_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:", Keyboards.report_options())

@bot.message_handler(func=lambda m: m.text == "üìú Logs")
def handle_logs_report(message):
    chat_id = message.chat.id
    if not is_admin(chat_id):
        return send_message(chat_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    generate_logs_report(chat_id)

@bot.message_handler(func=lambda m: m.text in ["üå¥ –ï–∂–µ–≥–æ–¥–Ω—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π –æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π", "üåû –ï–∂–µ–≥–æ–¥–Ω—ã–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π", "üèùÔ∏è –ë–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã"])
def handle_vacation_type(message):
    chat_id = message.chat.id
    vacation_types = {
        "üå¥ –ï–∂–µ–≥–æ–¥–Ω—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π –æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π": "–µ–∂–µ–≥–æ–¥–Ω—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π –æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π",
        "üåû –ï–∂–µ–≥–æ–¥–Ω—ã–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π": "–µ–∂–µ–≥–æ–¥–Ω—ã–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π",
        "üèùÔ∏è –ë–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã": "–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã"
    }
    app_type = vacation_types[message.text]
    send_message(chat_id, "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):", Keyboards.main_menu())
    bot.register_next_step_handler(message, application_start_date, app_type)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def register_step(message, next_step, prompt, *args):
    chat_id = message.chat.id
    if handle_main_menu_return(message):
        return
    send_message(chat_id, prompt, Keyboards.main_menu())
    bot.register_next_step_handler(message, next_step, *args, message.text)

def register_first_name(message):
    register_step(message, register_last_name, "–§–∞–º–∏–ª–∏—è:")

def register_last_name(message, first_name):
    register_step(message, register_position, "–î–æ–ª–∂–Ω–æ—Å—Ç—å:", first_name)

def register_position(message, first_name, last_name):
    register_step(message, register_department, "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:", first_name, last_name)

def register_department(message, first_name, last_name, position):
    register_step(message, register_email, "Email:", first_name, last_name, position)

def register_email(message, first_name, last_name, position, department):
    chat_id = message.chat.id
    if handle_main_menu_return(message):
        return
    is_valid, error = validate_email(message.text)
    if not is_valid:
        send_message(chat_id, f"‚ùå {error}", Keyboards.main_menu())
        bot.register_next_step_handler(message, register_email, first_name, last_name, position, department)
        return
    with db_session() as session:
        try:
            new_user = User(
                user_id=chat_id,
                first_name=first_name,
                last_name=last_name,
                position=position,
                department=department,
                email=message.text
            )
            session.add(new_user)
            session.flush()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
            saved_user = session.query(User).filter_by(user_id=chat_id).first()
            if saved_user:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                send_message(chat_id, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", Keyboards.action(chat_id))
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
            send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å /start", Keyboards.main_menu())

# –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏
def application_start_date(message, app_type):
    chat_id = message.chat.id
    if handle_main_menu_return(message):
        return
    is_valid, result = validate_date(message.text)
    if not is_valid:
        send_message(chat_id, f"‚ùå {result}", Keyboards.main_menu())
        handle_main_menu_return(message, application_start_date, app_type)
        return
    send_message(chat_id, "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î):", Keyboards.main_menu())
    bot.register_next_step_handler(message, application_end_date, app_type, result)

def application_end_date(message, app_type, start_date):
    chat_id = message.chat.id
    if handle_main_menu_return(message):
        return
    is_valid, result = validate_date(message.text)
    if not is_valid:
        send_message(chat_id, f"‚ùå {result}", Keyboards.main_menu())
        handle_main_menu_return(message, application_end_date, app_type, start_date)
        return
    end_date = result
    if end_date < start_date:
        send_message(chat_id, "‚ùå –ö–æ–Ω–µ—Ü —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª–∞", Keyboards.main_menu())
        handle_main_menu_return(message, application_end_date, app_type, start_date)
        return
    send_message(chat_id, "–ü—Ä–∏—á–∏–Ω–∞:", Keyboards.main_menu())
    bot.register_next_step_handler(message, application_reason, app_type, start_date, end_date)

def application_reason(message, app_type, start_date, end_date):
    chat_id = message.chat.id
    if handle_main_menu_return(message):
        return
    with db_session() as session:
        try:
            app = Application(user_id=chat_id, start_date=start_date.date(), end_date=end_date.date(),
                            type=app_type, status="–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏", reason=message.text)
            session.add(app)
            session.flush()
            app_id = app.application_id
            send_message(CONFIG["HR_CHAT_ID"],
                        f"–ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç {chat_id}: {app_type} —Å {start_date.date()} –ø–æ {end_date.date()}. –ü—Ä–∏—á–∏–Ω–∞: {message.text}")
            send_message(chat_id, "‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞", Keyboards.action(chat_id))
            session.add(Log(user_id=chat_id, action=f"–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ #{app_id}"))
        except Exception as e:
            send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫
def review_applications_button(message):
    chat_id = message.chat.id
    if not is_admin(chat_id):
        return send_message(chat_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    with db_session() as session:
        applications = session.query(Application).filter_by(status="–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏").order_by(Application.application_id.desc()).all()
        if not applications:
            sent_message = send_message(chat_id, "–ó–∞—è–≤–æ–∫ –Ω–µ—Ç", Keyboards.main_menu())
        else:
            markup = types.InlineKeyboardMarkup()
            for app in applications:
                markup.add(types.InlineKeyboardButton(f"üìã #{app.application_id} ({app.type})", callback_data=f"review_{app.application_id}"))
            sent_message = send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É:", markup)
        last_applications_message[chat_id] = sent_message.message_id

@bot.callback_query_handler(func=lambda call: call.data.startswith("review_"))
def review_application(call):
    chat_id = call.message.chat.id
    app_id = int(call.data.split("_")[1])
    with db_session() as session:
        app = session.query(Application).filter_by(application_id=app_id).first()
        if app:
            user = session.query(User).filter_by(user_id=app.user_id).first()
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{app_id}"),
                      types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{app_id}"))
            send_message(chat_id, f"#{app_id} –æ—Ç {user.first_name} {user.last_name}: {app.type}, {app.start_date} - {app.end_date}, {app.reason}", markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_"))
def approve_application(call):
    chat_id = call.message.chat.id
    app_id = int(call.data.split("_")[1])
    with db_session() as session:
        app = session.query(Application).filter_by(application_id=app_id).first()
        if app:
            app.status = "–æ–¥–æ–±—Ä–µ–Ω–∞"
            send_message(app.user_id, f"‚úÖ –ó–∞—è–≤–∫–∞ #{app_id} –æ–¥–æ–±—Ä–µ–Ω–∞")
            send_message(chat_id, f"‚úÖ #{app_id} –æ–¥–æ–±—Ä–µ–Ω–∞")
            session.add(Log(user_id=app.user_id, action=f"–û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{app_id}"))
    if chat_id in last_applications_message:
        delete_message(chat_id, last_applications_message[chat_id])
    review_applications_button(call.message)

@bot.callback_query_handler(func=lambda call: call.data.startswith("reject_"))
def reject_application(call):
    chat_id = call.message.chat.id
    app_id = int(call.data.split("_")[1])
    send_message(chat_id, "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:", Keyboards.main_menu())
    bot.register_next_step_handler(call.message, reject_reason, app_id)

def reject_reason(message, app_id):
    chat_id = message.chat.id
    if handle_main_menu_return(message):
        return
    with db_session() as session:
        app = session.query(Application).filter_by(application_id=app_id).first()
        if app:
            app.status = "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
            send_message(app.user_id, f"‚ùå –ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {message.text}")
            send_message(chat_id, f"‚ùå #{app_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
            session.add(Log(user_id=app.user_id, action=f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{app_id}"))
    if chat_id in last_applications_message:
        delete_message(chat_id, last_applications_message[chat_id])
    review_applications_button(message)

# –û—Ç—á–µ—Ç—ã
@bot.message_handler(func=lambda m: m.text == "üìÖ –ó–∞—è–≤–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥")
def report_applications_period(message):
    chat_id = message.chat.id
    if not is_admin(chat_id):
        return send_message(chat_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):", Keyboards.main_menu())
    bot.register_next_step_handler(message, report_applications_start_date)

def report_applications_start_date(message):
    chat_id = message.chat.id
    if handle_main_menu_return(message):
        return
    is_valid, start_date = validate_date(message.text, allow_past=True)
    if not is_valid:
        send_message(chat_id, f"‚ùå {start_date}", Keyboards.main_menu())
        handle_main_menu_return(message, report_applications_start_date)
        return
    send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):", Keyboards.main_menu())
    bot.register_next_step_handler(message, report_applications_end_date, start_date)

def report_applications_end_date(message, start_date):
    chat_id = message.chat.id
    if handle_main_menu_return(message):
        return
    is_valid, end_date = validate_date(message.text)
    if not is_valid:
        send_message(chat_id, f"‚ùå {end_date}", Keyboards.main_menu())
        handle_main_menu_return(message, report_applications_end_date, start_date)
        return
    if end_date < start_date:
        send_message(chat_id, "‚ùå –ö–æ–Ω–µ—Ü —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª–∞", Keyboards.main_menu())
        handle_main_menu_return(message, report_applications_end_date, start_date)
        return
    generate_applications_report(chat_id, start_date, end_date)

def generate_applications_report(chat_id, start_date, end_date):
    with db_session() as session:
        apps = session.query(Application).filter(
            Application.start_date >= start_date.date(),
            Application.end_date <= end_date.date()
        ).all()
        if not apps:
            send_message(chat_id, f"–ó–∞—è–≤–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date.date()} - {end_date.date()} –Ω–µ—Ç", Keyboards.action(chat_id))
            return
        report_lines = [f"–ó–∞—è–≤–∫–∏ —Å {start_date.date()} –ø–æ {end_date.date()}:"]
        for app in apps:
            user = session.query(User).filter_by(user_id=app.user_id).first()
            report_lines.append(f"#{app.application_id} - {user.first_name} {user.last_name} ({app.type}, {app.start_date} - {app.end_date}) - {app.status}")
        pdf_buffer = generate_pdf_report("–û—Ç—á–µ—Ç –ø–æ –∑–∞—è–≤–∫–∞–º", report_lines)
        send_pdf(chat_id, pdf_buffer, f"Applications_{start_date.date()}_{end_date.date()}.pdf")
        send_message(chat_id, "–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ PDF", Keyboards.action(chat_id))
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω PDF –æ—Ç—á–µ—Ç –ø–æ –∑–∞—è–≤–∫–∞–º –¥–ª—è {chat_id} —Å {start_date.date()} –ø–æ {end_date.date()}")

def generate_logs_report(chat_id):
    end_time = datetime.utcnow()
    start_time = end_time - timedelta(hours=24)
    with db_session() as session:
        logs = session.query(Log).filter(
            Log.timestamp >= start_time,
            Log.timestamp <= end_time
        ).order_by(Log.timestamp.asc()).all()
        if not logs:
            send_message(chat_id, "–õ–æ–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–µ—Ç", Keyboards.action(chat_id))
            return
        report_lines = [f"–õ–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ (—Å {start_time.strftime('%Y-%m-%d %H:%M:%S')} –ø–æ {end_time.strftime('%Y-%m-%d %H:%M:%S')}):"]
        for log in logs:
            user = session.query(User).filter_by(user_id=log.user_id).first()
            user_info = f"{user.first_name} {user.last_name} ({log.user_id})" if user else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {log.user_id}"
            report_lines.append(f"{log.timestamp.strftime('%Y-%m-%d %H:%M:%S')} - {user_info}: {log.action}")
        pdf_buffer = generate_pdf_report("–û—Ç—á–µ—Ç –ø–æ –ª–æ–≥–∞–º", report_lines)
        filename = f"Logs_{end_time.strftime('%Y-%m-%d_%H-%M-%S')}.pdf"
        send_pdf(chat_id, pdf_buffer, filename)
        send_message(chat_id, "–û—Ç—á–µ—Ç –ø–æ –ª–æ–≥–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ PDF", Keyboards.action(chat_id))
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω PDF –æ—Ç—á–µ—Ç –ø–æ –ª–æ–≥–∞–º –¥–ª—è {chat_id} —Å {start_time} –ø–æ {end_time}")

@bot.message_handler(func=lambda m: m.text == "‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –æ—Ç–¥–µ–ª–∞–º")
def report_duration_departments(message):
    chat_id = message.chat.id
    if not is_admin(chat_id):
        return send_message(chat_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ (–ì–ì–ì–ì):", Keyboards.main_menu())
    bot.register_next_step_handler(message, report_duration_year)

def report_duration_year(message):
    chat_id = message.chat.id
    if handle_main_menu_return(message):
        return
    try:
        year = int(message.text)
        current_year = datetime.now().year
        if year > current_year:
            send_message(chat_id, "‚ùå –ì–æ–¥ –≤ –±—É–¥—É—â–µ–º", Keyboards.main_menu())
            handle_main_menu_return(message, report_duration_year)
            return
        if year < 2000:
            send_message(chat_id, "‚ùå –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–Ω–∏–π –≥–æ–¥", Keyboards.main_menu())
            handle_main_menu_return(message, report_duration_year)
            return
    except ValueError:
        send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥–∞ (–ì–ì–ì–ì)", Keyboards.main_menu())
        handle_main_menu_return(message, report_duration_year)
        return
    generate_duration_report(chat_id, year)

def generate_duration_report(chat_id, year):
    start_date = datetime(year, 1, 1)
    end_date = datetime(year, 12, 31)
    with db_session() as session:
        apps = session.query(Application).filter(
            Application.start_date >= start_date.date(),
            Application.end_date <= end_date.date()
        ).all()
        if not apps:
            send_message(chat_id, f"–ó–∞—è–≤–æ–∫ –∑–∞ {year} –≥–æ–¥ –Ω–µ—Ç", Keyboards.action(chat_id))
            return
        dept_duration = {}
        for app in apps:
            user = session.query(User).filter_by(user_id=app.user_id).first()
            dept = user.department or "–ë–µ–∑ –æ—Ç–¥–µ–ª–∞"
            days = (app.end_date - app.start_date).days + 1
            dept_duration[dept] = dept_duration.get(dept, 0) + days
        report_lines = [f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–ø—É—Å–∫–æ–≤/–±–æ–ª—å–Ω–∏—á–Ω—ã—Ö –∑–∞ {year} –≥–æ–¥ –ø–æ –æ—Ç–¥–µ–ª–∞–º:"]
        for dept, days in dept_duration.items():
            report_lines.append(f"- {dept}: {days} –¥–Ω–µ–π")
        pdf_buffer = generate_pdf_report("–û—Ç—á–µ—Ç –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", report_lines)
        send_pdf(chat_id, pdf_buffer, f"Duration_{year}.pdf")
        send_message(chat_id, "–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ PDF", Keyboards.action(chat_id))
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω PDF –æ—Ç—á–µ—Ç –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è {chat_id} –∑–∞ {year}")

@bot.message_handler(func=lambda m: m.text == "üë§ –ó–∞—è–≤–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
def report_employee_applications(message):
    chat_id = message.chat.id
    if not is_admin(chat_id):
        return send_message(chat_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    with db_session() as session:
        users = session.query(User).all()
        if not users:
            send_message(chat_id, "–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", Keyboards.action(chat_id))
            return
        markup = types.InlineKeyboardMarkup()
        for user in users:
            markup.add(types.InlineKeyboardButton(f"{user.first_name} {user.last_name} ({user.user_id})", callback_data=f"emp_report_{user.user_id}"))
        send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("emp_report_"))
def generate_employee_report(call):
    chat_id = call.message.chat.id
    user_id = int(call.data.split("_")[2])
    with db_session() as session:
        user = session.query(User).filter_by(user_id=user_id).first()
        apps = session.query(Application).filter_by(user_id=user_id).all()
        if not apps:
            send_message(chat_id, f"–£ {user.first_name} {user.last_name} –Ω–µ—Ç –∑–∞—è–≤–æ–∫", Keyboards.action(chat_id))
            return
        report_lines = [f"–ó–∞—è–≤–∫–∏ {user.first_name} {user.last_name} ({user_id}):"]
        for app in apps:
            report_lines.append(f"#{app.application_id} - {app.type}, {app.start_date} - {app.end_date}, –°—Ç–∞—Ç—É—Å: {app.status}")
        pdf_buffer = generate_pdf_report(f"–û—Ç—á–µ—Ç –ø–æ –∑–∞—è–≤–∫–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {user.first_name} {user.last_name}", report_lines)
        send_pdf(chat_id, pdf_buffer, f"Employee_{user_id}_Applications.pdf")
        send_message(chat_id, "–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ PDF", Keyboards.action(chat_id))
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω PDF –æ—Ç—á–µ—Ç –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {user_id} –¥–ª—è {chat_id}")

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def delete_user_button(message):
    chat_id = message.chat.id
    if not is_admin(chat_id):
        return send_message(chat_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    with db_session() as session:
        users = session.query(User).all()
        if not users:
            send_message(chat_id, "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", Keyboards.main_menu())
        else:
            markup = types.InlineKeyboardMarkup()
            for user in users:
                markup.add(types.InlineKeyboardButton(f"{user.first_name} {user.last_name} ({user.user_id})", callback_data=f"deluser_{user.user_id}"))
            send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("deluser_"))
def confirm_delete_user(call):
    chat_id = call.message.chat.id
    user_id = int(call.data.split("_")[1])
    with db_session() as session:
        user = session.query(User).filter_by(user_id=user_id).first()
        if user:
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirmdel_{user_id}"),
                types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_delete")
            )
            send_message(chat_id, f"–£–¥–∞–ª–∏—Ç—å {user.first_name} {user.last_name} ({user.user_id})?", markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirmdel_"))
def delete_user(call):
    chat_id = call.message.chat.id
    user_id = int(call.data.split("_")[1])
    with db_session() as session:
        user = session.query(User).filter_by(user_id=user_id).first()
        if user:
            session.query(Application).filter_by(user_id=user_id).delete()
            session.query(Log).filter_by(user_id=user_id).delete()
            session.delete(user)
            send_message(chat_id, f"‚úÖ {user.first_name} {user.last_name} —É–¥–∞–ª–µ–Ω", Keyboards.action(chat_id))
            session.add(Log(user_id=chat_id, action=f"–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"))

@bot.callback_query_handler(func=lambda call: call.data == "cancel_delete")
def cancel_delete(call):
    chat_id = call.message.chat.id
    send_message(chat_id, "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", Keyboards.action(chat_id))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        bot.polling(none_stop=True)
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        engine.dispose()
    except Exception as e:
        logger.error(f"–ë–æ—Ç —É–ø–∞–ª: {e}")
        engine.dispose()
